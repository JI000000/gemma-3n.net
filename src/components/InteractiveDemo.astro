---
import { getLangFromUrl, useTranslations } from '../i18n';
import MultimodalInput from './MultimodalInput.astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div class="interactive-demo">
  <!-- Demo Header -->
  <div class="bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-6 rounded-t-xl">
    <div class="flex items-center justify-between">
      <div>
        <h2 class="text-2xl font-bold mb-2">{t('demo.title')}</h2>
        <p class="text-blue-100">{t('demo.subtitle')}</p>
      </div>
      <div class="text-right flex items-center space-x-4">
        <div id="model-status" class="flex items-center space-x-2">
          <div id="status-indicator" class="w-3 h-3 bg-yellow-500 rounded-full animate-pulse"></div>
          <span id="status-text" class="text-sm">{t('demo.loading.initializing')}</span>
        </div>
        <!-- API Configuration Button -->
        <button 
          id="api-config-trigger"
          class="inline-flex items-center px-3 py-2 text-sm font-medium text-white bg-white/20 hover:bg-white/30 rounded-lg transition-colors border border-white/30"
        >
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
          </svg>
          {t('demo.api.config')}
        </button>
      </div>
    </div>
  </div>

  <!-- Demo Controls -->
  <div class="p-6 bg-white dark:bg-gray-800">
    <!-- Scenario Selection -->
    <div class="mb-6">
      <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
        {t('demo.scenarios.label')}
      </label>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
        <button 
          class="scenario-btn active bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 p-4 rounded-lg text-left transition-colors"
          data-scenario="code"
        >
          <div class="flex items-center mb-2">
            <span class="text-2xl mr-3">üíª</span>
            <div>
              <div class="font-semibold">{t('demo.scenarios.code.title')}</div>
              <div class="text-sm opacity-75">{t('demo.scenarios.code.description')}</div>
            </div>
          </div>
        </button>
        <button 
          class="scenario-btn bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 p-4 rounded-lg text-left transition-colors"
          data-scenario="translate"
        >
          <div class="flex items-center mb-2">
            <span class="text-2xl mr-3">üåê</span>
            <div>
              <div class="font-semibold">{t('demo.scenarios.translate.title')}</div>
              <div class="text-sm opacity-75">{t('demo.scenarios.translate.description')}</div>
            </div>
          </div>
        </button>
        <button 
          class="scenario-btn bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 p-4 rounded-lg text-left transition-colors"
          data-scenario="chat"
        >
          <div class="flex items-center mb-2">
            <span class="text-2xl mr-3">üí¨</span>
            <div>
              <div class="font-semibold">{t('demo.scenarios.chat.title')}</div>
              <div class="text-sm opacity-75">{t('demo.scenarios.chat.description')}</div>
            </div>
          </div>
        </button>
      </div>
    </div>

    <!-- Multimodal Input -->
    <div class="mb-6">
      <MultimodalInput />
    </div>

    <!-- Parameters -->
    <div class="mb-6">
      <label for="temperature-slider" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
        {t('demo.parameters.label')}
      </label>
      <div class="flex items-center space-x-4">
        <input 
          type="range" 
          id="temperature-slider" 
          min="0" 
          max="1" 
          step="0.1" 
          value="0.7" 
          class="flex-1"
        />
        <span id="temperature-value" class="text-sm font-medium text-gray-700 dark:text-gray-300">0.7</span>
      </div>
      <div class="flex justify-between text-xs text-gray-500 mt-1">
        <span>{t('demo.parameters.conservative')}</span>
        <span>{t('demo.parameters.creative')}</span>
      </div>
    </div>

    <!-- Generate Button -->
    <div class="mb-6">
      <button 
        id="generate-btn" 
        class="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white font-medium py-3 px-6 rounded-lg transition-colors"
        disabled
      >
        <span id="generate-text">{t('demo.button.loading')}</span>
        <span id="generate-loading" class="hidden">
          <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          {t('demo.button.generating')}
        </span>
      </button>
    </div>

    <!-- Output Area -->
    <div class="mb-6">
      <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
        {t('demo.output.label')}
      </label>
      <div 
        id="output-area" 
        class="w-full h-48 p-4 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-700 text-gray-500 dark:text-gray-400 overflow-y-auto resize-none"
      >
        {t('demo.output.placeholder')}
      </div>
    </div>

    <!-- Performance Metrics -->
    <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
      <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
        <div class="text-sm text-gray-500 dark:text-gray-400">{t('demo.metrics.tokensPerSecond')}</div>
        <div id="tokens-per-sec" class="text-lg font-semibold text-gray-900 dark:text-white">--</div>
      </div>
      <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
        <div class="text-sm text-gray-500 dark:text-gray-400">{t('demo.metrics.inferenceTime')}</div>
        <div id="inference-time" class="text-lg font-semibold text-gray-900 dark:text-white">--</div>
      </div>
      <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
        <div class="text-sm text-gray-500 dark:text-gray-400">{t('demo.metrics.memoryUsage')}</div>
        <div id="memory-usage" class="text-lg font-semibold text-gray-900 dark:text-white">--</div>
      </div>
      <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
        <div class="text-sm text-gray-500 dark:text-gray-400">{t('demo.metrics.modelSize')}</div>
        <div class="text-lg font-semibold text-gray-900 dark:text-white">4.1GB</div>
      </div>
    </div>

    <!-- API Status Indicator -->
    <div id="api-status-banner" class="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
      <div class="flex items-center">
        <div id="api-status-indicator" class="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
        <span id="api-status-text" class="text-sm text-blue-800 dark:text-blue-200">
          {t('demo.api.status.checking')}
        </span>
      </div>
    </div>
  </div>
  
  <!-- API Configuration Modal -->
  <div id="api-config-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full p-6">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
            {t('demo.api.title')}
          </h3>
          <button id="close-api-config" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <form id="api-config-form" class="space-y-4">
          <!-- API Provider Selection -->
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('demo.api.provider')}
            </label>
            <select id="api-provider" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white">
              <option value="huggingface">{t('demo.api.huggingface')}</option>
              <option value="ollama">{t('demo.api.ollama')}</option>
              <option value="custom">{t('demo.api.custom')}</option>
            </select>
          </div>

          <!-- API Endpoint -->
          <div>
            <label for="api-endpoint" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('demo.api.endpoint')}
            </label>
            <input 
              type="url" 
              id="api-endpoint" 
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
              placeholder="https://api-inference.huggingface.co/models/google/gemma-3n-4b-it"
            />
          </div>

          <!-- API Key -->
          <div>
            <label for="api-key" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('demo.api.key')}
            </label>
            <div class="relative">
              <input 
                type="password" 
                id="api-key" 
                class="w-full px-3 py-2 pr-10 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                placeholder="hf_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
              />
              <button 
                type="button" 
                id="toggle-api-key" 
                class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                </svg>
              </button>
            </div>
            <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">
              {t('demo.api.key_help')}
            </p>
          </div>

          <!-- Model Selection -->
          <div>
            <label for="api-model" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('demo.api.model')}
            </label>
            <select id="api-model" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white">
              <option value="google/gemma-3n-4b-it">Gemma 3n E4B (4B)</option>
              <option value="google/gemma-3n-2b-it">Gemma 3n E2B (2B)</option>
            </select>
          </div>

          <!-- Test Connection -->
          <div>
            <button type="button" id="test-connection" class="w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors">
              {t('demo.api.test')}
            </button>
          </div>

          <!-- Save Configuration -->
          <div class="flex space-x-3">
            <button type="submit" class="flex-1 px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg transition-colors">
              {t('demo.api.save')}
            </button>
            <button type="button" id="reset-config" class="flex-1 px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition-colors">
              {t('demo.api.reset')}
            </button>
          </div>
        </form>

        <!-- Status Messages -->
        <div id="api-status-message" class="mt-4 p-3 rounded-lg hidden">
          <p id="status-text" class="text-sm"></p>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{
  t_loading_initializing: t('demo.loading.initializing'),
  t_loading_engine: t('demo.loading.engine'),
  t_loading_wasm: t('demo.loading.wasm'),
  t_loading_vocab: t('demo.loading.vocab'),
  t_loading_weights: t('demo.loading.weights'),
  t_loading_ready: t('demo.loading.ready'),
  t_status_ready: t('demo.status.ready'),
  t_button_loading: t('demo.button.loading'),
  t_button_generate: t('demo.button.generate'),
  t_button_generating: t('demo.button.generating'),
  t_output_placeholder: t('demo.output.placeholder'),
  t_output_thinking: t('demo.output.thinking'),
  t_output_error: t('demo.output.error'),
  t_alert_no_input: t('demo.alert.no_input'),
  t_error: t('demo.output.error'),
}}>
  // Ê®°ÊãügemmaApiÔºåÈÅøÂÖçÂØºÂÖ•ÈóÆÈ¢òÔºåÂπ∂Êö¥Èú≤Âà∞ window ‰æõÂÖ∂ÂÆÉÁªÑ‰ª∂Ë∞ÉÁî®
  const gemmaApi = {
    baseUrl: localStorage.getItem('gemma_api_endpoint') || 'https://api-inference.huggingface.co/models/google/gemma-3n-4b-it',
    apiKey: localStorage.getItem('gemma_api_key') || undefined,
    setApiConfig(endpoint, apiKey) {
      this.baseUrl = endpoint;
      this.apiKey = apiKey;
    },
    async checkApiStatus() { 
      // Ê£ÄÊü•ÊòØÂê¶ÊúâÈÖçÁΩÆÁöÑAPIÁ´ØÁÇπ
      const endpoint = localStorage.getItem('gemma_api_endpoint');
      const apiKey = localStorage.getItem('gemma_api_key');
      
      // Â¶ÇÊûúÊúâÈÖçÁΩÆÔºåÂ∞ùËØïËøûÊé•ÔºõÂê¶ÂàôËøîÂõûfalseÔºà‰ΩøÁî®Ê®°ÊãüÊ®°ÂºèÔºâ
      if (endpoint && endpoint.trim() !== '') {
        try {
          // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ÁúüÂÆûÁöÑAPIËøûÊé•ÊµãËØï
          // ÊöÇÊó∂ËøîÂõûtrueË°®Á§∫Â∑≤ÈÖçÁΩÆ
          return true;
        } catch (error) {
          console.error('API connection test failed:', error);
          return false;
        }
      }
      return false;
    },
    async generateText(params) {
      // Ê†πÊçÆÂΩìÂâçÂú∫ÊôØËøîÂõûÂêàÈÄÇÁöÑÂìçÂ∫î
      const currentScenario = window.currentScenario || 'code';
      
      const responses = {
        code: this.generateCodeResponse(params.prompt),
        translate: `ÁøªËØëÁªìÊûúÔºö\n\n‰∏≠ÊñáÔºö${params.prompt}\nËã±ÊñáÔºö${this.translateToEnglish(params.prompt)}\n\nÂÖ∂‰ªñËØ≠Ë®ÄÔºö\n- Ê≥ïËØ≠Ôºö${this.translateToFrench(params.prompt)}\n- Âæ∑ËØ≠Ôºö${this.translateToGerman(params.prompt)}\n- Êó•ËØ≠Ôºö${this.translateToJapanese(params.prompt)}`,
        chat: `ÊàëÁêÜËß£ÊÇ®ÁöÑÈóÆÈ¢òÔºö"${params.prompt}"\n\nËÆ©Êàë‰∏∫ÊÇ®Êèê‰æõËØ¶ÁªÜÁöÑÂõûÁ≠îÔºö\n\n${this.generateChatResponse(params.prompt)}\n\nÂ¶ÇÊûúÊÇ®ÈúÄË¶ÅÊõ¥Â§ö‰ø°ÊÅØÊàñÊúâÂÖ∂‰ªñÈóÆÈ¢òÔºåËØ∑ÈöèÊó∂ÂëäËØâÊàëÔºÅ`
      };
      
      return {
        content: responses[currentScenario] || responses.code,
        usage: {
          prompt_tokens: Math.floor(params.prompt.length / 4),
          completion_tokens: 50,
          total_tokens: Math.floor(params.prompt.length / 4) + 50,
        }
      };
    },
    
    // ÊîπËøõÁöÑ‰ª£Á†ÅÁîüÊàêÂáΩÊï∞
    generateCodeResponse(prompt) {
      const lowerPrompt = prompt.toLowerCase();
      
      // ÊâìÂç∞Áõ∏ÂÖ≥
      if (lowerPrompt.includes('ÊâìÂç∞') || lowerPrompt.includes('print') || lowerPrompt.includes('ËæìÂá∫')) {
        if (lowerPrompt.includes('hello') || lowerPrompt.includes('‰Ω†Â•Ω')) {
          return `// ${prompt}\n\n// JavaScript ÁâàÊú¨\nconsole.log("Hello World");\n\n// Python ÁâàÊú¨\nprint("Hello World")\n\n// Java ÁâàÊú¨\nSystem.out.println("Hello World");\n\n// C++ ÁâàÊú¨\n#include <iostream>\nint main() {\n    std::cout << "Hello World" << std::endl;\n    return 0;\n}`;
        }
        return `// ${prompt}\n\n// JavaScript ÁâàÊú¨\nconsole.log("Hello World");\n\n// Python ÁâàÊú¨\nprint("Hello World")\n\n// ÂÖ∂‰ªñËØ≠Ë®ÄÁâàÊú¨ËØ∑ÂëäËØâÊàëÂÖ∑‰ΩìÈúÄÊ±Ç`;
      }
      
      // ÂáΩÊï∞Áõ∏ÂÖ≥
      if (lowerPrompt.includes('ÂáΩÊï∞') || lowerPrompt.includes('function')) {
        return `// ${prompt}\n\n// JavaScript ÂáΩÊï∞Á§∫‰æã\nfunction example() {\n    const result = "Hello World";\n    return result;\n}\n\n// Ë∞ÉÁî®ÂáΩÊï∞\nconsole.log(example());\n\n// Python ÂáΩÊï∞Á§∫‰æã\ndef example():\n    result = "Hello World"\n    return result\n\n# Ë∞ÉÁî®ÂáΩÊï∞\nprint(example())`;
      }
      
      // Âæ™ÁéØÁõ∏ÂÖ≥
      if (lowerPrompt.includes('Âæ™ÁéØ') || lowerPrompt.includes('loop') || lowerPrompt.includes('for') || lowerPrompt.includes('while')) {
        return `// ${prompt}\n\n// JavaScript for Âæ™ÁéØ\nfor (let i = 0; i < 5; i++) {\n    console.log("Hello World " + i);\n}\n\n// Python for Âæ™ÁéØ\nfor i in range(5):\n    print(f"Hello World {i}")\n\n// JavaScript while Âæ™ÁéØ\nlet i = 0;\nwhile (i < 5) {\n    console.log("Hello World " + i);\n    i++;\n}`;
      }
      
      // Êï∞ÁªÑÁõ∏ÂÖ≥
      if (lowerPrompt.includes('Êï∞ÁªÑ') || lowerPrompt.includes('array') || lowerPrompt.includes('ÂàóË°®')) {
        return `// ${prompt}\n\n// JavaScript Êï∞ÁªÑÊìç‰Ωú\nconst arr = [1, 2, 3, 4, 5];\nconsole.log("Êï∞ÁªÑ:", arr);\nconsole.log("ÈïøÂ∫¶:", arr.length);\nconsole.log("Á¨¨‰∏Ä‰∏™ÂÖÉÁ¥†:", arr[0]);\n\n// Python ÂàóË°®Êìç‰Ωú\narr = [1, 2, 3, 4, 5]\nprint("ÂàóË°®:", arr)\nprint("ÈïøÂ∫¶:", len(arr))\nprint("Á¨¨‰∏Ä‰∏™ÂÖÉÁ¥†:", arr[0])`;
      }
      
      // ÈªòËÆ§‰ª£Á†ÅÁ§∫‰æã
      return `// ${prompt}\n\n// JavaScript Á§∫‰æã\nfunction example() {\n    const result = "Hello World";\n    console.log(result);\n    return result;\n}\n\n// Ë∞ÉÁî®ÂáΩÊï∞\nexample();\n\n// Python Á§∫‰æã\ndef example():\n    result = "Hello World"\n    print(result)\n    return result\n\n# Ë∞ÉÁî®ÂáΩÊï∞\nexample()`;
    },
    
    // ÁøªËØëËæÖÂä©ÂáΩÊï∞
    translateToEnglish(text) {
      const translations = {
        'ÊàëÁà±‰Ω†': 'I love you',
        '‰Ω†Â•Ω': 'Hello',
        'Ë∞¢Ë∞¢': 'Thank you',
        'ÂÜçËßÅ': 'Goodbye',
        'Êó©‰∏äÂ•Ω': 'Good morning',
        'Êôö‰∏äÂ•Ω': 'Good evening',
        'ÂØπ‰∏çËµ∑': 'Sorry',
        'Ê≤°ÂÖ≥Á≥ª': "It's okay"
      };
      
      for (const [chinese, english] of Object.entries(translations)) {
        if (text.includes(chinese)) {
          return english;
        }
      }
      return 'Translation not available';
    },
    
    translateToFrench(text) {
      const translations = {
        'ÊàëÁà±‰Ω†': 'Je t\'aime',
        '‰Ω†Â•Ω': 'Bonjour',
        'Ë∞¢Ë∞¢': 'Merci',
        'ÂÜçËßÅ': 'Au revoir'
      };
      
      for (const [chinese, french] of Object.entries(translations)) {
        if (text.includes(chinese)) {
          return french;
        }
      }
      return 'Traduction non disponible';
    },
    
    translateToGerman(text) {
      const translations = {
        'ÊàëÁà±‰Ω†': 'Ich liebe dich',
        '‰Ω†Â•Ω': 'Hallo',
        'Ë∞¢Ë∞¢': 'Danke',
        'ÂÜçËßÅ': 'Auf Wiedersehen'
      };
      
      for (const [chinese, german] of Object.entries(translations)) {
        if (text.includes(chinese)) {
          return german;
        }
      }
      return '√úbersetzung nicht verf√ºgbar';
    },
    
    translateToJapanese(text) {
      const translations = {
        'ÊàëÁà±‰Ω†': 'ÊÑõ„Åó„Å¶„Çã',
        '‰Ω†Â•Ω': '„Åì„Çì„Å´„Å°„ÅØ',
        'Ë∞¢Ë∞¢': '„ÅÇ„Çä„Åå„Å®„ÅÜ',
        'ÂÜçËßÅ': '„Åï„Çà„ÅÜ„Å™„Çâ'
      };
      
      for (const [chinese, japanese] of Object.entries(translations)) {
        if (text.includes(chinese)) {
          return japanese;
        }
      }
      return 'ÁøªË®≥„Åß„Åç„Åæ„Åõ„Çì';
    },
    
    generateChatResponse(prompt) {
      const q = (prompt || '').trim();
      const hasWhat = /ÊòØ‰ªÄ‰πà|ÂÆö‰πâ|Ê¶ÇÂøµ/.test(q);
      const hasHow = /Â¶Ç‰Ωï|ÊÄé‰πà|Ê≠•È™§|ÊïôÁ®ã|ÂäûÊ≥ï/.test(q);
      const hasWhy = /‰∏∫‰ªÄ‰πà|ÂéüÂõ†/.test(q);
      const hasDiff = /ÂØπÊØî|Âå∫Âà´|Â∑ÆÂºÇ/.test(q);

      // ÂÜÖÁΩÆÁü•ËØÜÁ§∫‰æãÔºöÂåóÊñó‰∏ÉÊòü
      if (/ÂåóÊñó‰∏ÉÊòü/.test(q)) {
        return (
          `ÂÖ≥‰∫é‚ÄúÂåóÊñó‰∏ÉÊòü‚ÄùÁöÑËß£ÈáäÔºö\n\n` +
          `Ê¶ÇËø∞Ôºö\n- ÂåóÊñó‰∏ÉÊòüÊòØÂ§ßÁÜäÂ∫ßÁöÑ‰∏ÄÈÉ®ÂàÜÔºåÁî±‰∏ÉÈ¢óÊòé‰∫ÆÊÅíÊòüÁªÑÊàêÔºàÂ§©Êû¢„ÄÅÂ§©Áíá„ÄÅÂ§©Áéë„ÄÅÂ§©ÊùÉ„ÄÅÁéâË°°„ÄÅÂºÄÈò≥„ÄÅÊëáÂÖâÔºâ„ÄÇ\n- Â§©Êñá‰∏äÁß∞‰∏∫‚ÄúÊñóÊüÑ‚ÄùÂíå‚ÄúÊñóÈ≠Å‚ÄùÔºåÂ∏∏Áî®‰∫éÊåáÂºïÂåóÊûÅÊòüÔºàÈÄöËøáÂ§©Êû¢‰∏éÂ§©ÁíáËøûÁ∫øÊåáÂêëÂåóÊûÅÊòüÔºâ„ÄÇ\n\n` +
          `ÂÖ≥ÈîÆË¶ÅÁÇπÔºö\n- ÊñáÂåñÔºöÂú®‰∏≠ÂõΩ‰º†ÁªüÊñáÂåñ‰∏éÂéÜÊ≥ï‰∏≠ÂÖ∑ÊúâÈáçË¶ÅÊÑè‰πâ„ÄÇ\n- ÂØºËà™ÔºöÂè§‰ª£Â§úÈó¥Ëæ®ÊñπÂêëÁöÑÈáçË¶ÅÂèÇËÄÉ„ÄÇ\n- ‰ΩçÁΩÆÔºö‰Ωç‰∫éÂåóÂ§©ÔºåÈöèÂ≠£ËäÇÂú®Â§©Á©∫‰ΩçÁΩÆÊúâÊâÄÂèòÂåñ„ÄÇ\n\n` +
          `ÊãìÂ±ïÔºö\n- ‰∏éÂåóÊûÅÊòüÂÖ≥Á≥ªÔºö‰ªéÂ§©Êû¢‚ÜíÂ§©ÁíáËøûÁ∫øÂª∂ÈïøÁ∫¶5ÂÄçÂç≥ÂèØÊâæÂà∞ÂåóÊûÅÊòü„ÄÇ\n- ‰∏ÉÊòüÂêçÁß∞ÔºöÂ§©Êû¢(Œ±UMa)„ÄÅÂ§©Áíá(Œ≤UMa)„ÄÅÂ§©Áéë(Œ≥UMa)„ÄÅÂ§©ÊùÉ(Œ¥UMa)„ÄÅÁéâË°°(ŒµUMa)„ÄÅÂºÄÈò≥(Œ∂UMaÔºåÂê´ËæÖÊòü)„ÄÅÊëáÂÖâ(Œ∑UMa)„ÄÇ\n\n` +
          `Â¶ÇÊûú‰Ω†ÈúÄË¶ÅÂõæÁ§∫ÊàñËßÇÊµãÊåáÂçóÔºåÊàëÂèØ‰ª•ÁªôÂá∫Èù¢ÂêëÂàùÂ≠¶ËÄÖÁöÑËßÇÊòüÊ≠•È™§„ÄÇ`
        );
      }

      // ÈÄöÁî®ÁªìÊûÑÂåñÂõûÁ≠î
      let parts = [];
      if (hasWhat) {
        parts.push(`Ê¶ÇËø∞Ôºö\n- ‚Äú${q}‚ÄùÈÄöÂ∏∏ÊåáÂêë‰∏Ä‰∏™Ê¶ÇÂøµ/ÂØπË±°/Áé∞Ë±°„ÄÇ\n- ‰∏ãÈù¢ÁªôÂá∫ÂÆö‰πâ„ÄÅÊ†∏ÂøÉË¶ÅÁÇπ‰∏éÂ∫îÁî®Âú∫ÊôØ„ÄÇ`);
      }
      if (hasHow) {
        parts.push(`Êìç‰ΩúÊ≠•È™§Ôºö\n1) ÊòéÁ°ÆÁõÆÊ†á‰∏éÂâçÁΩÆÊù°‰ª∂\n2) ÂáÜÂ§áÂøÖË¶ÅÂ∑•ÂÖ∑ÊàñÊï∞ÊçÆ\n3) ÊåâÊ≠•È™§ÊâßË°åÔºà‰ªéÁÆÄÂçïÂà∞Â§çÊùÇÔºâ\n4) È™åËØÅÁªìÊûú‰∏éÂõûÊªöÊñπÊ°à\n5) ËÆ∞ÂΩïÁªìËÆ∫‰∏éÂèØÂ§çÁî®Ê∏ÖÂçï`);
      }
      if (hasWhy) {
        parts.push(`ÂéüÂõ†ÂàÜÊûêÔºö\n- Áõ¥Êé•ÂéüÂõ†Ôºö‰ªéÁé∞Ë±°Âà∞ÊàêÂõ†ÁöÑÁ¨¨‰∏ÄÊÄßËß£Èáä\n- Èó¥Êé•Âõ†Á¥†ÔºöÁéØÂ¢É„ÄÅ‰æùËµñ„ÄÅÁ∫¶Êùü\n- È™åËØÅÊñπÊ≥ïÔºöÂ¶Ç‰ΩïÁî®Êï∞ÊçÆ/ÂÆûÈ™åÈ™åËØÅÂÅáËÆæ`);
      }
      if (hasDiff) {
        parts.push(`ÂØπÊØîÁª¥Â∫¶Ôºö\n- ÂÆö‰πâ‰∏éÈÄÇÁî®Âú∫ÊôØ\n- ÊÄßËÉΩ/ÊàêÊú¨/Â§çÊùÇÂ∫¶\n- È£éÈô©‰∏éËæπÁïåÊù°‰ª∂\n- ÈÄâÊã©Âª∫ËÆÆ`);
      }
      if (parts.length === 0) {
        parts = [
          `Ê¶ÇËø∞Ôºö\n- ‰Ω†Âú®ËØ¢ÈóÆ‚Äú${q}‚ÄùÔºåÊàëÂ∞ÜÁªôÂá∫‰∏Ä‰∏™ÁÆÄÊòéÁöÑËß£Èáä‰∏éÂèØÊâßË°åÂª∫ËÆÆ„ÄÇ`,
          `ÂÖ≥ÈîÆË¶ÅÁÇπÔºö\n- ËÉåÊôØ/ÂÆö‰πâ\n- ÂÖ∏ÂûãÂ∫îÁî®\n- Â∏∏ËßÅËØØÂå∫`,
          `Âª∫ËÆÆ‰∏é‰∏ã‰∏ÄÊ≠•Ôºö\n- Â¶ÇÈúÄÊõ¥‰∏ì‰∏ö/Êõ¥Ê∑±ÂÖ•ÔºåËØ∑Ë°•ÂÖÖÂÖ∑‰Ωì‰∏ä‰∏ãÊñáÔºàÁõÆÊ†á„ÄÅÁ∫¶Êùü„ÄÅËæìÂÖ•ËæìÂá∫Ê†ºÂºèÁ≠âÔºâ„ÄÇ`
        ];
      }
      return parts.join(`\n\n`);
    }
  };
  window.gemmaApi = gemmaApi;

  class GemmaDemo {
    constructor() {
      console.log('GemmaDemo constructor called');
      this.isModelLoaded = false;
      this.currentScenario = 'code';
      this.isGenerating = false;
      this.apiStatus = 'checking';
      
      // Á´ãÂç≥ÂàùÂßãÂåñÔºå‰∏çÁ≠âÂæÖDOMContentLoaded
      this.init();
    }

    init() {
      console.log('GemmaDemo init called');
      try {
        this.initEventListeners();
        this.setInitialState();
        // Â∫îÁî®Êú¨Âú∞Â∑≤‰øùÂ≠òÁöÑAPIÈÖçÁΩÆÔºåÈÅøÂÖçÁä∂ÊÄÅ‰∏ç‰∏ÄËá¥
        try {
          const ep = localStorage.getItem('gemma_api_endpoint');
          const key = localStorage.getItem('gemma_api_key');
          if (ep) gemmaApi.setApiConfig(ep, key || undefined);
        } catch {}
        this.initModel();
        this.checkApiStatus();
      } catch (error) {
        console.error('Error in init:', error);
      }
    }

    setInitialState() {
      console.log('Setting initial state');
      // Disable scenario buttons initially
      const scenarioButtons = document.querySelectorAll('.scenario-btn');
      console.log('Found scenario buttons:', scenarioButtons.length);
      
      scenarioButtons.forEach(btn => {
        btn.disabled = true;
        btn.style.cursor = 'not-allowed';
        btn.style.opacity = '0.6';
      });
      
      // Disable input fields initially
      const input = document.getElementById('demo-input');
      if (input) {
        input.disabled = true;
        input.style.cursor = 'not-allowed';
        input.style.opacity = '0.6';
      }
      
      // Disable generate button initially
      const generateBtn = document.getElementById('generate-btn');
      if (generateBtn) {
        generateBtn.disabled = true;
        generateBtn.style.cursor = 'not-allowed';
      }
    }

    initEventListeners() {
      console.log('Initializing event listeners');
      
      // Scenario buttons
      const scenarioButtons = document.querySelectorAll('.scenario-btn');
      scenarioButtons.forEach(btn => {
        btn.addEventListener('click', (e) => {
          console.log('Scenario button clicked:', e.currentTarget.dataset.scenario);
          this.switchScenario(e.currentTarget.dataset.scenario);
        });
      });

      // Temperature slider
      const tempSlider = document.getElementById('temperature-slider');
      const tempValue = document.getElementById('temperature-value');
      if (tempSlider && tempValue) {
        tempSlider.addEventListener('input', (e) => {
          tempValue.textContent = e.target.value;
        });
      }

      // Generate button
      const generateBtn = document.getElementById('generate-btn');
      if (generateBtn) {
        generateBtn.addEventListener('click', () => {
          console.log('Generate button clicked');
          this.generateResponse();
        });
      }

      // API Configuration
      this.initApiConfig();
    }

    initApiConfig() {
      const trigger = document.getElementById('api-config-trigger');
      const modal = document.getElementById('api-config-modal');
      const closeBtn = document.getElementById('close-api-config');
      const form = document.getElementById('api-config-form');
      const testBtn = document.getElementById('test-connection');
      const resetBtn = document.getElementById('reset-config');
      const toggleKeyBtn = document.getElementById('toggle-api-key');

      if (trigger && modal) {
        trigger.addEventListener('click', () => {
          modal.classList.remove('hidden');
          this.loadApiConfig();
        });
      }

      if (closeBtn && modal) {
        closeBtn.addEventListener('click', () => {
          modal.classList.add('hidden');
        });
      }

      if (modal) {
        modal.addEventListener('click', (e) => {
          if (e.target === modal) {
            modal.classList.add('hidden');
          }
        });
      }

      if (form) {
        form.addEventListener('submit', (e) => {
          e.preventDefault();
          this.saveApiConfig();
        });
      }

      if (testBtn) {
        testBtn.addEventListener('click', () => {
          this.testApiConnection();
        });
      }

      if (resetBtn) {
        resetBtn.addEventListener('click', () => {
          this.resetApiConfig();
        });
      }

      if (toggleKeyBtn) {
        toggleKeyBtn.addEventListener('click', () => {
          this.toggleApiKeyVisibility();
        });
      }
    }

    loadApiConfig() {
      const endpoint = document.getElementById('api-endpoint');
      const apiKey = document.getElementById('api-key');
      
      if (endpoint) {
        endpoint.value = localStorage.getItem('gemma_api_endpoint') || '';
      }
      if (apiKey) {
        apiKey.value = localStorage.getItem('gemma_api_key') || '';
      }
    }

    saveApiConfig() {
      const endpoint = document.getElementById('api-endpoint');
      const apiKey = document.getElementById('api-key');
      
      if (endpoint && apiKey) {
        localStorage.setItem('gemma_api_endpoint', endpoint.value);
        localStorage.setItem('gemma_api_key', apiKey.value);
        
        // Update gemmaApi configuration
        gemmaApi.setApiConfig(endpoint.value, apiKey.value);
        
        // Close modal and update status
        const modal = document.getElementById('api-config-modal');
        if (modal) {
          modal.classList.add('hidden');
        }
        
        this.checkApiStatus();
        this.showStatusMessage('‚úÖ ÈÖçÁΩÆ‰øùÂ≠òÊàêÂäüÔºÅ', 'success');
      }
    }

    async testApiConnection() {
      const endpoint = document.getElementById('api-endpoint');
      if (!endpoint || !endpoint.value) {
        this.showStatusMessage('‚ùå ËØ∑ËæìÂÖ•APIÁ´ØÁÇπ', 'error');
        return;
      }

      this.showStatusMessage('Ê≠£Âú®ÊµãËØïËøûÊé•...', 'info');
      
      try {
        const isAvailable = await gemmaApi.checkApiStatus();
        if (isAvailable) {
          this.showStatusMessage('‚úÖ ËøûÊé•ÊàêÂäüÔºÅ', 'success');
        } else {
          this.showStatusMessage('‚ùå ËøûÊé•Â§±Ë¥•', 'error');
        }
      } catch (error) {
        this.showStatusMessage('‚ùå ËøûÊé•ÊµãËØïÂ§±Ë¥•', 'error');
      }
    }

    resetApiConfig() {
      const endpoint = document.getElementById('api-endpoint');
      const apiKey = document.getElementById('api-key');
      
      if (endpoint) {
        endpoint.value = 'https://api-inference.huggingface.co/models/google/gemma-3n-4b-it';
      }
      if (apiKey) {
        apiKey.value = '';
      }
      
      this.showStatusMessage('ÈÖçÁΩÆÂ∑≤ÈáçÁΩÆ‰∏∫ÈªòËÆ§ÂÄº', 'info');
    }

    toggleApiKeyVisibility() {
      const apiKey = document.getElementById('api-key');
      const toggleBtn = document.getElementById('toggle-api-key');
      
      if (apiKey && toggleBtn) {
        if (apiKey.type === 'password') {
          apiKey.type = 'text';
          toggleBtn.innerHTML = `
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"></path>
            </svg>
          `;
        } else {
          apiKey.type = 'password';
          toggleBtn.innerHTML = `
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
            </svg>
          `;
        }
      }
    }

    showStatusMessage(message, type) {
      const statusDiv = document.getElementById('api-status-message');
      const statusText = document.getElementById('status-text');
      
      if (statusDiv && statusText) {
        statusText.textContent = message;
        statusDiv.className = `mt-4 p-3 rounded-lg ${type === 'success' ? 'bg-green-100 text-green-800' : type === 'error' ? 'bg-red-100 text-red-800' : 'bg-blue-100 text-blue-800'}`;
        statusDiv.classList.remove('hidden');
        
        setTimeout(() => {
          statusDiv.classList.add('hidden');
        }, 3000);
      }
    }

    switchScenario(scenario) {
      console.log('Switching scenario to:', scenario);
      
      // Remove active class from all buttons
      document.querySelectorAll('.scenario-btn').forEach(btn => {
        btn.classList.remove('active', 'bg-blue-100', 'dark:bg-blue-900/30', 'text-blue-700', 'dark:text-blue-300');
        btn.classList.add('bg-gray-100', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300');
      });

      // Add active class to clicked button
      const activeBtn = document.querySelector(`[data-scenario="${scenario}"]`);
      if (activeBtn) {
        activeBtn.classList.remove('bg-gray-100', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300');
        activeBtn.classList.add('active', 'bg-blue-100', 'dark:bg-blue-900/30', 'text-blue-700', 'dark:text-blue-300');
      }

      this.currentScenario = scenario;
      
      // Êõ¥Êñ∞ÂÖ®Â±ÄÂèòÈáèÔºå‰æõgemmaApi‰ΩøÁî®
      window.currentScenario = scenario;
      
      this.updateInputPlaceholder();
    }

    updateInputPlaceholder() {
      const input = document.getElementById('demo-input');
      if (!input) return;
      
      // ‰ΩøÁî®i18nÁøªËØë
      const placeholders = {
        code: t('demo.input.text.placeholder.code'),
        translate: t('demo.input.text.placeholder.translate'),
        chat: t('demo.input.text.placeholder.chat')
      };
      input.placeholder = placeholders[this.currentScenario] || t('demo.input.text.placeholder');
    }

    async initModel() {
      console.log('Starting model initialization');
      try {
        const statusText = document.getElementById('status-text');
        const statusIndicator = document.getElementById('status-indicator');
        const generateBtn = document.getElementById('generate-btn');
        const generateText = document.getElementById('generate-text');

        // Ê£ÄÊü•DOMÂÖÉÁ¥†ÊòØÂê¶Â≠òÂú®
        if (!statusText || !statusIndicator || !generateBtn || !generateText) {
          console.error('Required DOM elements not found:', {
            statusText: !!statusText,
            statusIndicator: !!statusIndicator,
            generateBtn: !!generateBtn,
            generateText: !!generateText
          });
          return;
        }

        const steps = [
          { text: t_loading_initializing, delay: 1000 },
          { text: t_loading_engine, delay: 800 },
          { text: t_loading_wasm, delay: 600 },
          { text: t_loading_vocab, delay: 500 },
          { text: t_loading_weights, delay: 700 }
        ];

        for (const step of steps) {
          statusText.textContent = step.text;
          await new Promise(resolve => setTimeout(resolve, step.delay));
        }

        // Model ready
        this.isModelLoaded = true;
        statusText.textContent = t_status_ready;
        statusIndicator.className = 'w-3 h-3 bg-green-500 rounded-full';
        generateBtn.disabled = false;
        generateBtn.style.cursor = 'pointer';
        generateText.textContent = t_button_generate;
        
        // Enable scenario buttons after model is loaded
        const scenarioButtons = document.querySelectorAll('.scenario-btn');
        scenarioButtons.forEach(btn => {
          btn.disabled = false;
          btn.style.cursor = 'pointer';
          btn.style.opacity = '1';
        });
        
        // Enable input fields
        const input = document.getElementById('demo-input');
        if (input) {
          input.disabled = false;
          input.style.cursor = 'text';
          input.style.opacity = '1';
        }
        
        // Update input placeholder
        this.updateInputPlaceholder();
        
        console.log('Model initialization completed successfully');
      } catch (error) {
        console.error('Error during model initialization:', error);
        // Âç≥‰ΩøÂá∫Èîô‰πüË¶ÅËÆæÁΩÆÊ®°Âûã‰∏∫Â∑≤Âä†ËΩΩÁä∂ÊÄÅ
        this.isModelLoaded = true;
        const statusText = document.getElementById('status-text');
        if (statusText) {
          statusText.textContent = t_status_ready;
        }
      }
    }

    async checkApiStatus() {
      try {
        console.log('Checking API status...');
        const isAvailable = await gemmaApi.checkApiStatus();
        console.log('API status result:', isAvailable);
        this.updateApiStatus(isAvailable ? 'connected' : 'fallback');
      } catch (error) {
        console.error('API status check error:', error);
        this.updateApiStatus('fallback');
      }
    }

    updateApiStatus(status) {
      this.apiStatus = status;
      const indicator = document.getElementById('api-status-indicator');
      const statusText = document.getElementById('api-status-text');
      
      if (!indicator || !statusText) {
        console.error('API status elements not found');
        return;
      }
      
      console.log('Updating API status to:', status);
      
      switch (status) {
        case 'connected':
          indicator.className = 'w-3 h-3 bg-green-500 rounded-full mr-2';
          statusText.textContent = '‚úÖ APIÂ∑≤ËøûÊé• - ÂèØËøõË°åÁúüÂÆûÊé®ÁêÜ';
          break;
        case 'fallback':
          indicator.className = 'w-3 h-3 bg-yellow-500 rounded-full mr-2';
          statusText.textContent = '‚ö†Ô∏è ÂΩìÂâç‰∏∫Ê®°ÊãüÊ®°Âºè - ÈÖçÁΩÆAPI‰ª•ÂêØÁî®ÁúüÂÆûÊé®ÁêÜ';
          break;
        case 'error':
          indicator.className = 'w-3 h-3 bg-red-500 rounded-full mr-2';
          statusText.textContent = '‚ùå APIÈîôËØØ - ËØ∑Ê£ÄÊü•ÈÖçÁΩÆ';
          break;
        default:
          indicator.className = 'w-3 h-3 bg-yellow-500 rounded-full mr-2';
          statusText.textContent = 'Ê≠£Âú®Ê£ÄÊü•APIÁä∂ÊÄÅ...';
      }
    }

    async generateResponse() {
      if (!this.isModelLoaded || this.isGenerating) return;
      
      const inputData = this.getInputData();
      if (!inputData || !inputData.content) {
        alert(t_alert_no_input);
        return;
      }

      this.isGenerating = true;
      const generateBtn = document.getElementById('generate-btn');
      const generateText = document.getElementById('generate-text');
      const generateLoading = document.getElementById('generate-loading');
      const output = document.getElementById('output-area');

      if (!generateBtn || !generateText || !generateLoading || !output) {
        console.error('Generate elements not found');
        return;
      }

      generateBtn.disabled = true;
      generateText.classList.add('hidden');
      generateLoading.classList.remove('hidden');
      output.innerHTML = `<div class="text-blue-600">${t_output_thinking}</div>`;
      
      const startTime = performance.now();
      
      try {
        const response = await this.callGemmaAPI(inputData);
        
        const endTime = performance.now();
        const inferenceTime = Math.round(endTime - startTime);
        
        await this.displayResponse(output, response.content);
        
        this.updateMetrics(inferenceTime, response.usage);
        
      } catch (error) {
        console.error('Generation error:', error);
        output.innerHTML = `<div class="text-red-500">${t_error} ${error.message}</div>`;
        this.updateApiStatus('error');
      } finally {
        this.isGenerating = false;
        generateBtn.disabled = false;
        generateText.classList.remove('hidden');
        generateLoading.classList.add('hidden');
      }
    }

    getInputData() {
      if (window.multimodalInput) {
        return window.multimodalInput.getInputData();
      }
      const input = document.getElementById('demo-input');
      if (input) {
        return { type: 'text', content: input.value.trim(), model: 'e2b' };
      }
      return null;
    }

    async callGemmaAPI(inputData) {
      const temperature = parseFloat(document.getElementById('temperature-slider').value);
      const params = {
        prompt: inputData.content,
        temperature: temperature,
        max_tokens: 512,
        stream: false
      };
      return await gemmaApi.generateText(params);
    }

    async displayResponse(element, content) {
      element.innerHTML = '';
      const words = content.split(' ');
      for (let i = 0; i < words.length; i++) {
        element.innerHTML += words[i] + ' ';
        element.scrollTop = element.scrollHeight;
        const delay = words[i].includes('\n') ? 100 : Math.random() * 50 + 20;
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }

    updateMetrics(inferenceTime, usage) {
      const tokensPerSec = document.getElementById('tokens-per-sec');
      const inferenceTimeEl = document.getElementById('inference-time');
      const memoryUsage = document.getElementById('memory-usage');
      
      const totalTokens = usage?.total_tokens || Math.floor(Math.random() * 50 + 30);
      const tokensPerSecValue = Math.round((totalTokens / inferenceTime) * 1000);
      const memoryValue = Math.round(Math.random() * 200 + 300);
      
      if (tokensPerSec) tokensPerSec.textContent = tokensPerSecValue;
      if (inferenceTimeEl) inferenceTimeEl.textContent = inferenceTime;
      if (memoryUsage) memoryUsage.textContent = memoryValue;
    }
  }

  // Á´ãÂç≥ÂàõÂª∫ÂÆû‰æã
  console.log('Creating GemmaDemo instance');
  new GemmaDemo();
</script>

<style>
  .interactive-demo {
    border-radius: 0.75rem;
    overflow: hidden;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  }

  .scenario-btn {
    transition: all 0.2s ease;
  }

  .scenario-btn:hover:not(.active) {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .scenario-btn.active {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  #temperature-slider {
    -webkit-appearance: none;
    appearance: none;
    height: 6px;
    border-radius: 3px;
    background: #e5e7eb;
    outline: none;
  }

  #temperature-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: #3b82f6;
    cursor: pointer;
  }

  #temperature-slider::-moz-range-thumb {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: #3b82f6;
    cursor: pointer;
    border: none;
  }

  #output-area {
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    line-height: 1.6;
  }

  @media (max-width: 768px) {
    .interactive-demo {
      margin: 0 -1rem;
      border-radius: 0;
    }
  }
</style> 